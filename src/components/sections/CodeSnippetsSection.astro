---
import PitchSlide from "../PitchSlide.astro";
---

<PitchSlide
	id="code-snippets"
	title="Clean, Efficient Code"
	subtitle="Built with best practices and modern patterns"
	bgColor="var(--bg-secondary)"
>
	<div class="code-snippets-container">
		<div class="code-tabs">
			<button class="code-tab active" data-tab="frontend"
				>Frontend</button
			>
			<button class="code-tab" data-tab="backend">Backend</button>
			<button class="code-tab" data-tab="mobile">Mobile</button>
		</div>

		<div class="code-panels">
			<div class="code-panel active" id="frontend-panel">
				<div class="code-header">
					<span class="code-filename">RecipeCard.tsx</span>
					<div class="code-actions">
						<span class="code-language">TypeScript</span>
					</div>
				</div>
				<pre
					class="code-block"><code>{`import React, { useState, useCallback } from 'react';
import { Recipe, User } from '@/types';
import { LikeButton, ShareButton } from '@/components/ui';
import { useRecipeLike } from '@/hooks/useRecipeLike';

interface RecipeCardProps {
	recipe: Recipe;
	currentUser?: User;
	onOrderClick: (recipeId: string) => void;
}

export const RecipeCard: React.FC<RecipeCardProps> = ({
	recipe,
	currentUser,
	onOrderClick,
}) => {
	const { isLiked, toggleLike, likeCount } = useRecipeLike(
		recipe.id, 
		recipe.likes, 
		currentUser?.id
	);
	
	const handleOrderClick = useCallback(() => {
		onOrderClick(recipe.id);
	}, [recipe.id, onOrderClick]);
	
	return (
		<div className="recipe-card">
			<div className="recipe-image">
				<img src={recipe.imageUrl} alt={recipe.title} />
				{recipe.videoUrl && (
					<button className="play-button" aria-label="Play video">
						<PlayIcon />
					</button>
				)}
			</div>
			
			<div className="recipe-content">
				<h3>{recipe.title}</h3>
				<p className="recipe-author">By {recipe.author.name}</p>
				
				<div className="recipe-meta">
					<span>{recipe.cookingTime} mins</span>
					<span>{recipe.difficulty}</span>
				</div>
				
				<div className="recipe-actions">
					<LikeButton 
						isLiked={isLiked} 
						likeCount={likeCount} 
						onToggle={toggleLike} 
					/>
					<ShareButton url={\`/recipes/\${recipe.id}\`} />
					<button 
						className="order-button"
						onClick={handleOrderClick}
					>
						Order Ingredients
					</button>
				</div>
			</div>
		</div>
	);
}`}</code></pre>
			</div>

			<div class="code-panel" id="backend-panel">
				<div class="code-header">
					<span class="code-filename">recipeService.ts</span>
					<div class="code-actions">
						<span class="code-language">TypeScript</span>
					</div>
				</div>
				<pre
					class="code-block"><code>{`import { Recipe, RecipeInput, User } from '../types';
import { RecipeRepository } from '../repositories/recipeRepository';
import { IngredientService } from './ingredientService';
import { NotFoundError, ValidationError } from '../errors';
import { EventEmitter } from '../utils/eventEmitter';

export class RecipeService {
	constructor(
		private recipeRepository: RecipeRepository,
		private ingredientService: IngredientService,
		private eventEmitter: EventEmitter
	) {}

	async getRecipeById(id: string): Promise<Recipe> {
		const recipe = await this.recipeRepository.findById(id);
		
		if (!recipe) {
			throw new NotFoundError(\`Recipe with ID \${id} not found\`);
		}
		
		return recipe;
	}

	async createRecipe(input: RecipeInput, author: User): Promise<Recipe> {
		// Validate ingredients exist
		await Promise.all(
			input.ingredients.map(async (ingredient) => {
				const exists = await this.ingredientService.ingredientExists(
					ingredient.ingredientId
				);
				
				if (!exists) {
					throw new ValidationError(
						\`Ingredient with ID \${ingredient.ingredientId} does not exist\`
					);
				}
			})
		);
		
		const recipe = await this.recipeRepository.create({
			...input,
			authorId: author.id,
			createdAt: new Date(),
			updatedAt: new Date(),
			likes: 0,
		});
		
		// Emit event for recommendation engine
		this.eventEmitter.emit('recipe.created', { recipe });
		
		return recipe;
	}

	async toggleLike(recipeId: string, userId: string): Promise<{ liked: boolean; likeCount: number }> {
		const recipe = await this.getRecipeById(recipeId);
		const isLiked = await this.recipeRepository.isLikedByUser(recipeId, userId);
		
		if (isLiked) {
			await this.recipeRepository.removeLike(recipeId, userId);
			return { liked: false, likeCount: recipe.likes - 1 };
		} else {
			await this.recipeRepository.addLike(recipeId, userId);
			return { liked: true, likeCount: recipe.likes + 1 };
		}
	}
}`}</code></pre>
			</div>

			<div class="code-panel" id="mobile-panel">
				<div class="code-header">
					<span class="code-filename">RecipeScreen.tsx</span>
					<div class="code-actions">
						<span class="code-language">React Native</span>
					</div>
				</div>
				<pre
					class="code-block"><code>{`import React, { useEffect, useState } from 'react';
import { 
	View, 
	Text, 
	Image, 
	ScrollView, 
	TouchableOpacity, 
	StyleSheet,
	ActivityIndicator
} from 'react-native';
import { useRoute, useNavigation } from '@react-navigation/native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { useRecipe } from '../hooks/useRecipe';
import { IngredientList } from '../components/IngredientList';
import { StepByStepInstructions } from '../components/StepByStepInstructions';
import { AddToCartButton } from '../components/AddToCartButton';
import { ErrorView } from '../components/ErrorView';
import { RecipeScreenProps } from '../navigation/types';
import { colors, spacing, typography } from '../theme';

export const RecipeScreen = () => {
	const route = useRoute<RecipeScreenProps['route']>();
	const navigation = useNavigation();
	const { recipeId } = route.params;
	const { recipe, loading, error } = useRecipe(recipeId);
	const [activeTab, setActiveTab] = useState('ingredients');
	
	useEffect(() => {
		if (recipe) {
			navigation.setOptions({
				title: recipe.title,
			});
		}
	}, [recipe, navigation]);
	
	if (loading) {
		return (
			<View style={styles.loadingContainer}>
				<ActivityIndicator size="large" color={colors.primary} />
			</View>
		);
	}
	
	if (error || !recipe) {
		return <ErrorView message={error || 'Recipe not found'} />;
	}
	
	return (
		<SafeAreaView style={styles.container}>
			<ScrollView>
				<Image 
					source={{ uri: recipe.imageUrl }} 
					style={styles.recipeImage} 
					resizeMode="cover"
				/>
				
				<View style={styles.content}>
					<Text style={styles.title}>{recipe.title}</Text>
					<Text style={styles.author}>By {recipe.author.name}</Text>
					
					<View style={styles.metaInfo}>
						<View style={styles.metaItem}>
							<Text style={styles.metaValue}>{recipe.cookingTime}</Text>
							<Text style={styles.metaLabel}>minutes</Text>
						</View>
						<View style={styles.metaItem}>
							<Text style={styles.metaValue}>{recipe.servings}</Text>
							<Text style={styles.metaLabel}>servings</Text>
						</View>
						<View style={styles.metaItem}>
							<Text style={styles.metaValue}>{recipe.difficulty}</Text>
							<Text style={styles.metaLabel}>difficulty</Text>
						</View>
					</View>
					
					<View style={styles.tabs}>
						<TouchableOpacity
							style={[
								styles.tab,
								activeTab === 'ingredients' && styles.activeTab,
							]}
							onPress={() => setActiveTab('ingredients')}
						>
							<Text 
								style={[
									styles.tabText,
									activeTab === 'ingredients' && styles.activeTabText,
								]}
							>
								Ingredients
							</Text>
						</TouchableOpacity>
						
						<TouchableOpacity
							style={[
								styles.tab,
								activeTab === 'instructions' && styles.activeTab,
							]}
							onPress={() => setActiveTab('instructions')}
						>
							<Text 
								style={[
									styles.tabText,
									activeTab === 'instructions' && styles.activeTabText,
								]}
							>
								Instructions
							</Text>
						</TouchableOpacity>
					</View>
					
					{activeTab === 'ingredients' ? (
						<IngredientList ingredients={recipe.ingredients} />
					) : (
						<StepByStepInstructions steps={recipe.instructions} />
					)}
				</View>
			</ScrollView>
			
			<View style={styles.footer}>
				<AddToCartButton 
					recipeId={recipe.id} 
					price={recipe.kitPrice} 
				/>
			</View>
		</SafeAreaView>
	);
}`}</code></pre>
			</div>
		</div>
	</div>
</PitchSlide>

<style>
	/* Code Snippets Section */
	.code-snippets-container {
		display: flex;
		flex-direction: column;
		gap: 1.5rem;
	}

	.code-tabs {
		display: flex;
		gap: 0.5rem;
		border-bottom: 1px solid rgba(0, 0, 0, 0.1);
		padding-bottom: 0.5rem;
	}

	.code-tab {
		padding: 0.5rem 1rem;
		background: none;
		border: none;
		border-radius: 4px 4px 0 0;
		cursor: pointer;
		font-weight: 500;
		color: var(--text-secondary);
		transition: all 0.3s ease;
	}

	.code-tab.active {
		color: var(--color-primary);
		background-color: rgba(255, 107, 53, 0.1);
	}

	.code-panels {
		position: relative;
		border-radius: 8px;
		overflow: hidden;
	}

	.code-panel {
		display: none;
	}

	.code-panel.active {
		display: block;
	}

	.code-header {
		display: flex;
		justify-content: space-between;
		align-items: center;
		padding: 0.75rem 1rem;
		background-color: #2d2d2d;
		color: #e0e0e0;
		font-family: monospace;
	}

	.code-filename {
		font-weight: 500;
	}

	.code-language {
		font-size: 0.8rem;
		padding: 0.2rem 0.5rem;
		background-color: rgba(255, 255, 255, 0.1);
		border-radius: 4px;
	}

	.code-block {
		margin: 0;
		padding: 1rem;
		background-color: #1e1e1e;
		color: #e0e0e0;
		overflow-x: auto;
		font-family: "Fira Code", monospace;
		font-size: 0.9rem;
		line-height: 1.5;
	}

	.code-block code {
		white-space: pre;
	}

	@media (max-width: 768px) {
		.code-block {
			font-size: 0.8rem;
		}
	}
</style>

<script>
	// Code Tabs
	document.addEventListener("DOMContentLoaded", () => {
		const codeTabs = document.querySelectorAll(".code-tab");

		codeTabs.forEach((tab) => {
			tab.addEventListener("click", () => {
				// Remove active class from all tabs and panels
				document
					.querySelectorAll(".code-tab")
					.forEach((t) => t.classList.remove("active"));
				document
					.querySelectorAll(".code-panel")
					.forEach((p) => p.classList.remove("active"));

				// Add active class to clicked tab and corresponding panel
				tab.classList.add("active");
				const tabId = tab.getAttribute("data-tab") || "";
				const panel = document.getElementById(`${tabId}-panel`);
				if (panel) {
					panel.classList.add("active");
				}
			});
		});
	});
</script> 