---
// Empty frontmatter section is needed for Astro components
---

<!-- Pitch Deck Request Modal -->
<div id="pitchDeckModal" class="modal">
	<div class="modal-content">
		<span class="close-modal" id="closePitchDeckModal">&times;</span>
		<h2>Request Pitch Deck</h2>
		<p>Please fill in your details to download our pitch deck.</p>

		<form id="pitchDeckForm" class="pitch-deck-form">
			<div class="form-group">
				<label for="pitchDeckName">Name</label>
				<input type="text" id="pitchDeckName" name="name" required />
			</div>

			<div class="form-group">
				<label for="pitchDeckEmail">Email</label>
				<input type="email" id="pitchDeckEmail" name="email" required />
			</div>

			<div class="form-group">
				<label for="pitchDeckPhone">Phone Number</label>
				<input
					type="tel"
					id="pitchDeckPhone"
					name="phone"
					placeholder="+1 (123) 456-7890"
				/>
			</div>

			<div class="form-group">
				<label for="pitchDeckCompany">Company</label>
				<input
					type="text"
					id="pitchDeckCompany"
					name="company"
					required
				/>
			</div>

			<div class="form-group">
				<label for="pitchDeckRole">Role</label>
				<input type="text" id="pitchDeckRole" name="role" required />
			</div>

			<!-- Hidden field to store Turnstile token -->
			<input
				type="hidden"
				id="pitch-turnstile-token"
				name="cf-turnstile-response"
			/>
			<input
				type="hidden"
				name="form-name"
				value="pitch_deck_request"
			/>

			<!-- Cloudflare Turnstile widget -->
			<div class="turnstile-container">
				<div
					id="pitch-turnstile-widget"
					class="cf-turnstile"
					data-sitekey="0x4AAAAAAA_8oRbwx6WEQqqT"
					data-callback="onPitchDeckTurnstileSuccess"
				>
				</div>
			</div>

			<div class="form-status" id="pitch-form-status"></div>

			<button
				type="submit"
				class="btn btn-primary"
				id="pitch-submit-button">Download Pitch Deck</button
			>
		</form>
	</div>
</div>

<style>
	/* Modal Styles */
	.modal {
		display: none;
		position: fixed;
		z-index: 1100;
		left: 0;
		top: 0;
		width: 100%;
		height: 100%;
		overflow: auto;
		background-color: rgba(0, 0, 0, 0.6);
		backdrop-filter: blur(5px);
		opacity: 0;
		transition: opacity 0.3s ease;
	}

	.modal.show {
		display: block;
		opacity: 1;
	}

	.modal-content {
		background-color: var(--bg-card);
		margin: 5% auto;
		padding: 2rem;
		border-radius: var(--radius-lg);
		box-shadow: var(--shadow-lg);
		max-width: 500px;
		width: 90%;
		transform: translateY(-50px);
		transition: transform 0.3s ease;
		position: relative;
	}

	.modal.show .modal-content {
		transform: translateY(0);
	}

	.close-modal {
		position: absolute;
		top: 1rem;
		right: 1.5rem;
		font-size: 1.5rem;
		font-weight: bold;
		cursor: pointer;
		color: var(--text-secondary);
		transition: color 0.3s ease;
	}

	.close-modal:hover {
		color: var(--color-primary);
	}

	.pitch-deck-form {
		margin-top: 1.5rem;
	}

	/* Form Styles */
	.form-group {
		margin-bottom: 1.5rem;
	}

	.form-group label {
		display: block;
		margin-bottom: 0.5rem;
		font-weight: 500;
	}

	.form-group input {
		width: 100%;
		padding: 0.75rem;
		border: 1px solid #ddd;
		border-radius: var(--radius-md);
		font-family: inherit;
		font-size: 1rem;
	}

	.form-group input:focus {
		outline: none;
		border-color: var(--color-primary);
		box-shadow: 0 0 0 2px rgba(255, 107, 53, 0.2);
	}

	/* Button Styles */
	.btn {
		display: inline-block;
		padding: 0.75rem 1.5rem;
		background-color: var(--color-primary);
		color: white;
		border: none;
		border-radius: var(--radius-md);
		font-weight: 600;
		cursor: pointer;
		transition: all 0.3s ease;
		text-align: center;
		text-decoration: none;
	}

	.btn:hover {
		background-color: var(--color-primary-dark);
		transform: translateY(-2px);
		box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
	}

	.btn-primary {
		background-color: var(--color-primary);
		color: white;
	}

	/* Turnstile Container */
	.turnstile-container {
		margin-bottom: 1.5rem;
	}

	/* Form Status */
	.form-status {
		margin-bottom: 1.5rem;
		font-size: 0.9rem;
	}

	.success-message {
		color: #10b981;
		padding: 0.5rem;
		background-color: rgba(16, 185, 129, 0.1);
		border-radius: var(--radius-md);
	}

	.error-message {
		color: #ef4444;
		padding: 0.5rem;
		background-color: rgba(239, 68, 68, 0.1);
		border-radius: var(--radius-md);
	}
</style>

<script is:inline>
	// Pitch Deck Modal with Turnstile
	document.addEventListener("DOMContentLoaded", () => {
		const requestBtn = document.getElementById("requestPitchDeckBtn");
		const modal = document.getElementById("pitchDeckModal");
		const closeBtn = document.getElementById("closePitchDeckModal");
		const pitchDeckForm = document.getElementById("pitchDeckForm");
		const formStatus = document.getElementById("pitch-form-status");
		const submitBtn = document.getElementById("pitch-submit-button");

		// Track if the Turnstile widget has been initialized
		let pitchTurnstileInitialized = false;

		// Explicitly render Turnstile widgets when modal opens
		if (requestBtn && modal) {
			requestBtn.addEventListener("click", () => {
				modal.classList.add("show");
				document.body.style.overflow = "hidden"; // Prevent background scrolling

				// If turnstile hasn't loaded yet, check periodically until it's available
				if (!pitchTurnstileInitialized) {
					const checkTurnstile = setInterval(() => {
						if (window.turnstile) {
							// Check if the widget container has any children
							const widgetContainer = document.getElementById(
								"pitch-turnstile-widget",
							);
							if (
								widgetContainer &&
								widgetContainer.children.length === 0
							) {
								try {
									window.turnstile.render(
										"#pitch-turnstile-widget",
									);
									pitchTurnstileInitialized = true;
									console.log(
										"Pitch deck Turnstile widget initialized",
									);
								} catch (error) {
									console.error(
										"Failed to render Turnstile widget:",
										error,
									);
								}
							}
							clearInterval(checkTurnstile);
						}
					}, 100);

					// Set a timeout to stop checking after 5 seconds
					setTimeout(() => {
						clearInterval(checkTurnstile);
					}, 5000);
				}
			});
		}

		// Pitch Deck Turnstile callback
		window.onPitchDeckTurnstileSuccess = function (token) {
			console.log("Pitch deck Turnstile success, token received:", token);
			// Store the token in hidden field
			const hiddenInput = document.getElementById(
				"pitch-turnstile-token",
			);
			if (hiddenInput) {
				hiddenInput.value = token;
			}
		};

		// Close modal when X is clicked
		if (closeBtn && modal) {
			closeBtn.addEventListener("click", () => {
				modal.classList.remove("show");
				document.body.style.overflow = ""; // Re-enable scrolling
			});
		}

		// Close modal when clicking outside
		if (modal) {
			modal.addEventListener("click", (e) => {
				if (e.target === modal) {
					modal.classList.remove("show");
					document.body.style.overflow = ""; // Re-enable scrolling
				}
			});
		}

		// Handle form submission with Turnstile
		if (pitchDeckForm && formStatus && submitBtn) {
			pitchDeckForm.addEventListener("submit", async (e) => {
				e.preventDefault();

				// Get token directly from hidden field
				const hiddenInput = document.getElementById(
					"pitch-turnstile-token",
				);
				const turnstileToken = hiddenInput?.value;

				console.log(
					"Form submission - Token from hidden field:",
					turnstileToken,
				);

				if (!turnstileToken) {
					formStatus.innerHTML =
						'<div class="error-message">Please complete the security check</div>';

					// Reset Turnstile - use correct method to reset
					try {
						if (window.turnstile) {
							// Try to find widget ID first
							const widget = document.querySelector(
								"#pitch-turnstile-widget",
							);
							if (widget) {
								const widgetId =
									widget.getAttribute("data-widget-id");
								if (widgetId) {
									window.turnstile.reset(widgetId);
								} else {
									// Fallback to container selector
									window.turnstile.reset(
										"#pitch-turnstile-widget",
									);
								}
							}
						}
					} catch (resetError) {
						console.log("Turnstile reset error:", resetError);
					}
					return;
				}

				// Disable button and show loading state
				submitBtn.disabled = true;
				submitBtn.innerHTML = "Processing...";
				formStatus.innerHTML = "";

				// Get form data
				const formData = new FormData(pitchDeckForm);

				// Log all form data values for debugging
				for (const [key, value] of formData.entries()) {
					console.log(`Form data: ${key} = ${value}`);
				}

				// Don't override if the token is already included in the form 
				// (which it should be through the hidden input)
				if (!formData.get("cf-turnstile-response") && turnstileToken) {
					console.log("Adding turnstile token to form data manually");
					formData.append("cf-turnstile-response", turnstileToken);
				}

				// Add metadata for the form handler
				formData.append("notification_email", "ash@livefreshr.com");
				formData.append("form_type", "pitch_deck_request");

				try {
					console.log("Submitting form data with token length:", turnstileToken.length);
					
					// Collect form data and preserve the Turnstile token
					const response = await fetch(
						"https://form-handler.eighty7.uk/",
						{
							method: "POST",
							body: formData,
							mode: "cors", // Explicitly set CORS mode
							headers: {
								Origin: window.location.origin,
							},
						},
					);

					const result = await response.json();
					console.log("Server response:", result);

					if (response.ok) {
						// Success
						formStatus.innerHTML =
							'<div class="success-message">Request received! Downloading pitch deck...</div>';

						// Create a download link for the pitch deck PDF
						setTimeout(() => {
							const downloadLink = document.createElement("a");
							downloadLink.href = "/JustCook_Pitch_Deck.pdf"; // Path to your pitch deck PDF
							downloadLink.download = "JustCook_Pitch_Deck.pdf";
							document.body.appendChild(downloadLink);
							downloadLink.click();
							document.body.removeChild(downloadLink);

							// Close the modal after download starts
							if (modal) {
								setTimeout(() => {
									modal.classList.remove("show");
									document.body.style.overflow = ""; // Re-enable scrolling

									// Reset form but preserve token to avoid Turnstile reload
									pitchDeckForm.querySelector('#pitch-turnstile-token').value = turnstileToken;
									pitchDeckForm.reset();
									// Restore token after reset
									pitchDeckForm.querySelector('#pitch-turnstile-token').value = turnstileToken;

									// Reset button
									submitBtn.disabled = false;
									submitBtn.innerHTML = "Download Pitch Deck";
								}, 1500);
							}
						}, 1000);
					} else {
						// Error
						formStatus.innerHTML = `<div class="error-message">${result.message || "Something went wrong. Please try again."}</div>`;
						submitBtn.disabled = false;
						submitBtn.innerHTML = "Download Pitch Deck";
					}
				} catch (error) {
					console.error("Form submission error:", error);
					// Network or other error
					formStatus.innerHTML =
						'<div class="error-message">Network error. Please try again later.</div>';
					submitBtn.disabled = false;
					submitBtn.innerHTML = "Download Pitch Deck";
				}
			});
		}
	});
</script>
