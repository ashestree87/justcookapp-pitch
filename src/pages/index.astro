---
import MainLayout from '../layouts/MainLayout.astro';
import PitchSlide from '../components/PitchSlide.astro';
import CTAButton from '../components/CTAButton.astro';
import DataCharts from '../components/DataCharts.astro';

// Welcome to Astro! Wondering what to do next? Check out the Astro documentation at https://docs.astro.build
// Don't want to use any of this? Delete everything in this file, the `assets`, `components`, and `layouts` directories, and start fresh.
---

<MainLayout title="JustCook.app - Where Cooking Meets Content">
	<!-- Cover Slide -->
	<section id="hero" class="hero-section">
		<div class="container">
			<div class="hero-content">
				<h1 class="hero-title">JustCook<span class="accent">.app</span></h1>
				<p class="hero-tagline">Where Cooking Meets Content</p>
				<div class="hero-cta">
					<CTAButton 
						text="Learn More" 
						href="#problem" 
						variant="primary" 
						size="large" 
					/>
					<CTAButton 
						text="Contact Us" 
						href="#contact" 
						variant="outline" 
						size="large" 
					/>
				</div>
			</div>
			<div class="hero-image">
				<img 
					src="https://placehold.co/600x800/FF6B35/FFF?text=JustCook+App" 
					alt="JustCook app interface showing engaging food videos" 
					width="600" 
					height="800"
				/>
			</div>
		</div>
		<div class="scroll-indicator">
			<span>Scroll</span>
			<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
				<path d="M12 5V19M12 19L5 12M12 19L19 12" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
			</svg>
		</div>
	</section>

	<!-- Problem Statement -->
	<PitchSlide 
		id="problem" 
		title="The Problem" 
		subtitle="A disconnect between inspiration and action"
		bgColor="var(--bg-secondary)"
	>
		<div class="problem-grid grid grid-3">
			<div class="problem-card card">
				<h3>Content Disconnect</h3>
				<p>Consumers are bombarded with mouth-watering food content on platforms like Instagram and TikTok but lack a way to turn that inspiration into action.</p>
			</div>
			<div class="problem-card card">
				<h3>Missed Monetization</h3>
				<p>Food content creators struggle to monetize their work effectively, missing out on revenue opportunities from their engaging content.</p>
			</div>
			<div class="problem-card card">
				<h3>Frustration</h3>
				<p>Users experience frustration from not being able to order or cook the dishes they see, creating a gap between content consumption and practical food solutions.</p>
			</div>
		</div>
	</PitchSlide>

	<!-- Solution -->
	<PitchSlide 
		id="solution" 
		title="The Solution" 
		subtitle="Bridging the gap between food content and cooking"
	>
		<div class="solution-container grid grid-2">
			<div class="solution-image">
				<img 
					src="https://placehold.co/400x800/2EC4B6/FFF?text=App+Mockup" 
					alt="JustCook app interface" 
					width="400" 
					height="800"
				/>
			</div>
			<div class="solution-content">
				<h3>JustCook.app Concept</h3>
				<p>A hybrid platform where users can browse dynamic, portrait-oriented food content and seamlessly order meal kits to recreate the recipes at home.</p>
				
				<div class="features-list">
					<div class="feature-item">
						<div class="feature-icon">🛒</div>
						<div class="feature-text">
							<h4>Integrated Ordering</h4>
							<p>Direct linkage from engaging food videos to purchasing fully prepared meal kits.</p>
						</div>
					</div>
					
					<div class="feature-item">
						<div class="feature-icon">💰</div>
						<div class="feature-text">
							<h4>Creator Monetization</h4>
							<p>A new revenue stream for food content creators via affiliate sales and commissions.</p>
						</div>
					</div>
					
					<div class="feature-item">
						<div class="feature-icon">🌟</div>
						<div class="feature-text">
							<h4>Enhanced User Experience</h4>
							<p>Combines the visual appeal of social media with the practicality of home-cooked meals.</p>
						</div>
					</div>
				</div>
			</div>
		</div>
	</PitchSlide>

	<!-- App Demo -->
	<PitchSlide 
		id="app-demo" 
		title="See It In Action" 
		subtitle="Experience the JustCook.app interface"
	>
		<div class="app-demo-container">
			<div class="app-screens">
				<div class="phone-mockup">
					<div class="phone-screen">
						<div class="app-screen active" id="screen1">
							<img src="https://placehold.co/320x690/FF6B35/FFF?text=Browse" alt="Browse Screen" />
							<div class="screen-caption">Browse trending recipes</div>
						</div>
						<div class="app-screen" id="screen2">
							<img src="https://placehold.co/320x690/2EC4B6/FFF?text=Recipe" alt="Recipe Screen" />
							<div class="screen-caption">View detailed recipes</div>
						</div>
						<div class="app-screen" id="screen3">
							<img src="https://placehold.co/320x690/FFBF69/333?text=Order" alt="Order Screen" />
							<div class="screen-caption">Order ingredients with one tap</div>
						</div>
					</div>
				</div>
			</div>
			
			<div class="app-demo-controls">
				<button class="demo-btn active" data-screen="screen1">Browse</button>
				<button class="demo-btn" data-screen="screen2">Recipe</button>
				<button class="demo-btn" data-screen="screen3">Order</button>
			</div>
		</div>
	</PitchSlide>

	<!-- Market Opportunity -->
	<PitchSlide 
		id="market" 
		title="Market Opportunity" 
		subtitle="Tapping into growing trends"
		bgColor="var(--bg-secondary)"
	>
		<div class="market-content">
			<div class="market-trends mb-5">
				<h3>Industry Trends</h3>
				<div class="trends-grid grid grid-2">
					<div class="trend-card card">
						<h4>Rising Demand for Meal Kits</h4>
						<p>Consumers are increasingly seeking convenient, at-home cooking solutions that provide quality ingredients and recipes.</p>
						<div class="trend-stat">
							<span class="stat-number">35%</span>
							<span class="stat-label">YoY Growth</span>
						</div>
					</div>
					
					<div class="trend-card card">
						<h4>Content-Driven Engagement</h4>
						<p>Social media continues to influence food trends and purchasing behavior, especially among millennials and Gen Z.</p>
						<div class="trend-stat">
							<span class="stat-number">68%</span>
							<span class="stat-label">of users discover recipes on social media</span>
						</div>
					</div>
				</div>
			</div>
			
			<div class="market-expansion">
				<h3>Regional Focus & Expansion</h3>
				<div class="expansion-map">
					<div class="expansion-phase">
						<span class="phase-number">1</span>
						<div class="phase-content">
							<h4>Dubai & UAE</h4>
							<p>Initial launch market with strong digital adoption and food culture</p>
						</div>
					</div>
					
					<div class="expansion-phase">
						<span class="phase-number">2</span>
						<div class="phase-content">
							<h4>GCC Region</h4>
							<p>Expansion to neighboring countries with similar demographics</p>
						</div>
					</div>
					
					<div class="expansion-phase">
						<span class="phase-number">3</span>
						<div class="phase-content">
							<h4>Global Markets</h4>
							<p>Strategic expansion to key international markets</p>
						</div>
					</div>
				</div>
			</div>
		</div>
	</PitchSlide>

	<!-- Data Visualization -->
	<PitchSlide 
		id="data-viz" 
		title="Market Insights" 
		subtitle="Data-driven decision making"
	>
		<div class="data-viz-container">
			<DataCharts />
		</div>
	</PitchSlide>

	<!-- How It Works -->
	<PitchSlide 
		id="how-it-works" 
		title="How It Works" 
		subtitle="A seamless journey from inspiration to plate"
	>
		<div class="process-flow">
			<div class="process-steps grid grid-3">
				<div class="process-step card">
					<div class="step-number">1</div>
					<div class="step-content">
						<h4>Browsing</h4>
						<p>Users scroll through a feed of engaging food videos in portrait mode.</p>
					</div>
				</div>
				
				<div class="process-step card">
					<div class="step-number">2</div>
					<div class="step-content">
						<h4>Exploration</h4>
						<p>Tapping a video reveals detailed recipes and meal kit information.</p>
					</div>
				</div>
				
				<div class="process-step card">
					<div class="step-number">3</div>
					<div class="step-content">
						<h4>Ordering</h4>
						<p>A seamless process to order the meal kit featuring all necessary ingredients.</p>
					</div>
				</div>
				
				<div class="process-step card">
					<div class="step-number">4</div>
					<div class="step-content">
						<h4>Delivery</h4>
						<p>Integrated with third-party last-mile providers ensuring efficient delivery.</p>
					</div>
				</div>
				
				<div class="process-step card">
					<div class="step-number">5</div>
					<div class="step-content">
						<h4>Cooking</h4>
						<p>Step-by-step recipes guide users through the cooking process.</p>
					</div>
				</div>
				
				<div class="process-step card">
					<div class="step-number">6</div>
					<div class="step-content">
						<h4>Sharing</h4>
						<p>Users can share their cooking results, creating a loop of organic content generation.</p>
					</div>
				</div>
			</div>
		</div>
	</PitchSlide>

	<!-- Tech Stack -->
	<PitchSlide 
		id="tech-stack" 
		title="Our Technology" 
		subtitle="Built with modern, scalable technologies"
		bgColor="var(--bg-secondary)"
	>
		<div class="tech-stack-container">
			<h3 class="text-center mb-4">Powered by cutting-edge technologies</h3>
			
			<div class="tech-categories grid grid-3">
				<div class="tech-category card">
					<h4>Frontend</h4>
					<div class="tech-icons">
						<div class="tech-icon">
							<img src="https://cdn.jsdelivr.net/gh/devicons/devicon/icons/react/react-original.svg" alt="React" />
							<span>React Native</span>
						</div>
						<div class="tech-icon">
							<img src="https://cdn.jsdelivr.net/gh/devicons/devicon/icons/typescript/typescript-original.svg" alt="TypeScript" />
							<span>TypeScript</span>
						</div>
						<div class="tech-icon">
							<img src="https://cdn.jsdelivr.net/gh/devicons/devicon/icons/tailwindcss/tailwindcss-plain.svg" alt="Tailwind CSS" />
							<span>Tailwind CSS</span>
						</div>
					</div>
				</div>
				
				<div class="tech-category card">
					<h4>Backend</h4>
					<div class="tech-icons">
						<div class="tech-icon">
							<img src="https://cdn.jsdelivr.net/gh/devicons/devicon/icons/nodejs/nodejs-original.svg" alt="Node.js" />
							<span>Node.js</span>
						</div>
						<div class="tech-icon">
							<img src="https://cdn.jsdelivr.net/gh/devicons/devicon/icons/graphql/graphql-plain.svg" alt="GraphQL" />
							<span>GraphQL</span>
						</div>
						<div class="tech-icon">
							<img src="https://cdn.jsdelivr.net/gh/devicons/devicon/icons/postgresql/postgresql-original.svg" alt="PostgreSQL" />
							<span>PostgreSQL</span>
						</div>
					</div>
				</div>
				
				<div class="tech-category card">
					<h4>Infrastructure</h4>
					<div class="tech-icons">
						<div class="tech-icon">
							<img src="https://cdn.jsdelivr.net/gh/devicons/devicon/icons/amazonwebservices/amazonwebservices-original.svg" alt="AWS" />
							<span>AWS</span>
						</div>
						<div class="tech-icon">
							<img src="https://cdn.jsdelivr.net/gh/devicons/devicon/icons/docker/docker-original.svg" alt="Docker" />
							<span>Docker</span>
						</div>
						<div class="tech-icon">
							<img src="https://cdn.jsdelivr.net/gh/devicons/devicon/icons/kubernetes/kubernetes-plain.svg" alt="Kubernetes" />
							<span>Kubernetes</span>
						</div>
					</div>
				</div>
			</div>
		</div>
	</PitchSlide>

	<!-- Architecture -->
	<PitchSlide 
		id="architecture" 
		title="Technical Architecture" 
		subtitle="Scalable, secure, and efficient by design"
	>
		<div class="architecture-container">
			<div class="architecture-diagram">
				<div class="arch-layer" id="client-layer">
					<h4 class="layer-title">Client Layer</h4>
					<div class="arch-components">
						<div class="arch-component">
							<div class="component-icon">📱</div>
							<div class="component-label">Mobile App</div>
						</div>
						<div class="arch-component">
							<div class="component-icon">🌐</div>
							<div class="component-label">Web App</div>
						</div>
					</div>
				</div>
				
				<div class="arch-connector"></div>
				
				<div class="arch-layer" id="api-layer">
					<h4 class="layer-title">API Layer</h4>
					<div class="arch-components">
						<div class="arch-component">
							<div class="component-icon">🔄</div>
							<div class="component-label">GraphQL API</div>
						</div>
						<div class="arch-component">
							<div class="component-icon">🔐</div>
							<div class="component-label">Auth Service</div>
						</div>
					</div>
				</div>
				
				<div class="arch-connector"></div>
				
				<div class="arch-layer" id="service-layer">
					<h4 class="layer-title">Service Layer</h4>
					<div class="arch-components">
						<div class="arch-component">
							<div class="component-icon">🍽️</div>
							<div class="component-label">Recipe Service</div>
						</div>
						<div class="arch-component">
							<div class="component-icon">🛒</div>
							<div class="component-label">Order Service</div>
						</div>
						<div class="arch-component">
							<div class="component-icon">👤</div>
							<div class="component-label">User Service</div>
						</div>
					</div>
				</div>
				
				<div class="arch-connector"></div>
				
				<div class="arch-layer" id="data-layer">
					<h4 class="layer-title">Data Layer</h4>
					<div class="arch-components">
						<div class="arch-component">
							<div class="component-icon">💾</div>
							<div class="component-label">PostgreSQL</div>
						</div>
						<div class="arch-component">
							<div class="component-icon">📊</div>
							<div class="component-label">Redis Cache</div>
						</div>
						<div class="arch-component">
							<div class="component-icon">📁</div>
							<div class="component-label">S3 Storage</div>
						</div>
					</div>
				</div>
			</div>
			
			<div class="architecture-features">
				<div class="arch-feature">
					<h4>Microservices Architecture</h4>
					<p>Independently scalable services for better resilience and development velocity</p>
				</div>
				<div class="arch-feature">
					<h4>Real-time Data Processing</h4>
					<p>Event-driven architecture enables instant updates and notifications</p>
				</div>
				<div class="arch-feature">
					<h4>Global CDN Distribution</h4>
					<p>Content delivery network ensures fast loading times worldwide</p>
				</div>
			</div>
		</div>
	</PitchSlide>

	<!-- Performance Metrics -->
	<PitchSlide 
		id="performance" 
		title="Performance Metrics" 
		subtitle="Built for speed and reliability"
	>
		<div class="performance-container">
			<div class="performance-intro text-center mb-5">
				<p>Our platform is optimized for speed and efficiency at every level. Here's how we measure up:</p>
			</div>
			
			<div class="metrics-grid grid grid-3">
				<div class="metric-card card">
					<div class="metric-value">
						<span class="counter" data-target="99.9">0</span>%
					</div>
					<h4>Uptime</h4>
					<p>Enterprise-grade reliability with redundant systems and automatic failover</p>
					<div class="metric-bar">
						<div class="metric-progress" style="width: 99.9%"></div>
					</div>
				</div>
				
				<div class="metric-card card">
					<div class="metric-value">
						<span class="counter" data-target="0.8">0</span>s
					</div>
					<h4>API Response Time</h4>
					<p>Lightning-fast backend processing with optimized database queries</p>
					<div class="metric-bar">
						<div class="metric-progress" style="width: 85%"></div>
					</div>
				</div>
				
				<div class="metric-card card">
					<div class="metric-value">
						<span class="counter" data-target="1.2">0</span>s
					</div>
					<h4>App Load Time</h4>
					<p>Optimized assets and code splitting for rapid initial load</p>
					<div class="metric-bar">
						<div class="metric-progress" style="width: 80%"></div>
					</div>
				</div>
			</div>
			
			<div class="optimization-techniques grid grid-2 mt-5">
				<div class="optimization-card card">
					<h4>Frontend Optimizations</h4>
					<ul class="optimization-list">
						<li>Lazy loading of images and components</li>
						<li>Efficient state management with Redux Toolkit</li>
						<li>Memoized components to prevent unnecessary re-renders</li>
						<li>Service worker for offline capabilities</li>
					</ul>
				</div>
				
				<div class="optimization-card card">
					<h4>Backend Optimizations</h4>
					<ul class="optimization-list">
						<li>Distributed caching with Redis</li>
						<li>Database query optimization and indexing</li>
						<li>Horizontal scaling with containerized microservices</li>
						<li>CDN integration for static assets</li>
					</ul>
				</div>
			</div>
		</div>
	</PitchSlide>

	<!-- Code Snippets -->
	<PitchSlide 
		id="code-snippets" 
		title="Clean, Efficient Code" 
		subtitle="Built with best practices and modern patterns"
		bgColor="var(--bg-secondary)"
	>
		<div class="code-snippets-container">
			<div class="code-tabs">
				<button class="code-tab active" data-tab="frontend">Frontend</button>
				<button class="code-tab" data-tab="backend">Backend</button>
				<button class="code-tab" data-tab="mobile">Mobile</button>
			</div>
			
			<div class="code-panels">
				<div class="code-panel active" id="frontend-panel">
					<div class="code-header">
						<span class="code-filename">RecipeCard.tsx</span>
						<div class="code-actions">
							<span class="code-language">TypeScript</span>
						</div>
					</div>
					<pre class="code-block"><code>{`import React, { useState, useCallback } from 'react';
import { Recipe, User } from '@/types';
import { LikeButton, ShareButton } from '@/components/ui';
import { useRecipeLike } from '@/hooks/useRecipeLike';

interface RecipeCardProps {
	recipe: Recipe;
	currentUser?: User;
	onOrderClick: (recipeId: string) => void;
}

export const RecipeCard: React.FC<RecipeCardProps> = ({
	recipe,
	currentUser,
	onOrderClick,
}) => {
	const { isLiked, toggleLike, likeCount } = useRecipeLike(
		recipe.id, 
		recipe.likes, 
		currentUser?.id
	);
	
	const handleOrderClick = useCallback(() => {
		onOrderClick(recipe.id);
	}, [recipe.id, onOrderClick]);
	
	return (
		<div className="recipe-card">
			<div className="recipe-image">
				<img src={recipe.imageUrl} alt={recipe.title} />
				{recipe.videoUrl && (
					<button className="play-button" aria-label="Play video">
						<PlayIcon />
					</button>
				)}
			</div>
			
			<div className="recipe-content">
				<h3>{recipe.title}</h3>
				<p className="recipe-author">By {recipe.author.name}</p>
				
				<div className="recipe-meta">
					<span>{recipe.cookingTime} mins</span>
					<span>{recipe.difficulty}</span>
				</div>
				
				<div className="recipe-actions">
					<LikeButton 
						isLiked={isLiked} 
						likeCount={likeCount} 
						onToggle={toggleLike} 
					/>
					<ShareButton url={\`/recipes/\${recipe.id}\`} />
					<button 
						className="order-button"
						onClick={handleOrderClick}
					>
						Order Ingredients
					</button>
				</div>
			</div>
		</div>
	);
}`}</code></pre>
				</div>
				
				<div class="code-panel" id="backend-panel">
					<div class="code-header">
						<span class="code-filename">recipeService.ts</span>
						<div class="code-actions">
							<span class="code-language">TypeScript</span>
						</div>
					</div>
					<pre class="code-block"><code>{`import { Recipe, RecipeInput, User } from '../types';
import { RecipeRepository } from '../repositories/recipeRepository';
import { IngredientService } from './ingredientService';
import { NotFoundError, ValidationError } from '../errors';
import { EventEmitter } from '../utils/eventEmitter';

export class RecipeService {
	constructor(
		private recipeRepository: RecipeRepository,
		private ingredientService: IngredientService,
		private eventEmitter: EventEmitter
	) {}

	async getRecipeById(id: string): Promise<Recipe> {
		const recipe = await this.recipeRepository.findById(id);
		
		if (!recipe) {
			throw new NotFoundError(\`Recipe with ID \${id} not found\`);
		}
		
		return recipe;
	}

	async createRecipe(input: RecipeInput, author: User): Promise<Recipe> {
		// Validate ingredients exist
		await Promise.all(
			input.ingredients.map(async (ingredient) => {
				const exists = await this.ingredientService.ingredientExists(
					ingredient.ingredientId
				);
				
				if (!exists) {
					throw new ValidationError(
						\`Ingredient with ID \${ingredient.ingredientId} does not exist\`
					);
				}
			})
		);
		
		const recipe = await this.recipeRepository.create({
			...input,
			authorId: author.id,
			createdAt: new Date(),
			updatedAt: new Date(),
			likes: 0,
		});
		
		// Emit event for recommendation engine
		this.eventEmitter.emit('recipe.created', { recipe });
		
		return recipe;
	}

	async toggleLike(recipeId: string, userId: string): Promise<{ liked: boolean; likeCount: number }> {
		const recipe = await this.getRecipeById(recipeId);
		const isLiked = await this.recipeRepository.isLikedByUser(recipeId, userId);
		
		if (isLiked) {
			await this.recipeRepository.removeLike(recipeId, userId);
			return { liked: false, likeCount: recipe.likes - 1 };
		} else {
			await this.recipeRepository.addLike(recipeId, userId);
			return { liked: true, likeCount: recipe.likes + 1 };
		}
	}
}`}</code></pre>
				</div>
				
				<div class="code-panel" id="mobile-panel">
					<div class="code-header">
						<span class="code-filename">RecipeScreen.tsx</span>
						<div class="code-actions">
							<span class="code-language">React Native</span>
						</div>
					</div>
					<pre class="code-block"><code>{`import React, { useEffect, useState } from 'react';
import { 
	View, 
	Text, 
	Image, 
	ScrollView, 
	TouchableOpacity, 
	StyleSheet,
	ActivityIndicator
} from 'react-native';
import { useRoute, useNavigation } from '@react-navigation/native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { useRecipe } from '../hooks/useRecipe';
import { IngredientList } from '../components/IngredientList';
import { StepByStepInstructions } from '../components/StepByStepInstructions';
import { AddToCartButton } from '../components/AddToCartButton';
import { ErrorView } from '../components/ErrorView';
import { RecipeScreenProps } from '../navigation/types';
import { colors, spacing, typography } from '../theme';

export const RecipeScreen = () => {
	const route = useRoute<RecipeScreenProps['route']>();
	const navigation = useNavigation();
	const { recipeId } = route.params;
	const { recipe, loading, error } = useRecipe(recipeId);
	const [activeTab, setActiveTab] = useState('ingredients');
	
	useEffect(() => {
		if (recipe) {
			navigation.setOptions({
				title: recipe.title,
			});
		}
	}, [recipe, navigation]);
	
	if (loading) {
		return (
			<View style={styles.loadingContainer}>
				<ActivityIndicator size="large" color={colors.primary} />
			</View>
		);
	}
	
	if (error || !recipe) {
		return <ErrorView message={error || 'Recipe not found'} />;
	}
	
	return (
		<SafeAreaView style={styles.container}>
			<ScrollView>
				<Image 
					source={{ uri: recipe.imageUrl }} 
					style={styles.recipeImage} 
					resizeMode="cover"
				/>
				
				<View style={styles.content}>
					<Text style={styles.title}>{recipe.title}</Text>
					<Text style={styles.author}>By {recipe.author.name}</Text>
					
					<View style={styles.metaInfo}>
						<View style={styles.metaItem}>
							<Text style={styles.metaValue}>{recipe.cookingTime}</Text>
							<Text style={styles.metaLabel}>minutes</Text>
						</View>
						<View style={styles.metaItem}>
							<Text style={styles.metaValue}>{recipe.servings}</Text>
							<Text style={styles.metaLabel}>servings</Text>
						</View>
						<View style={styles.metaItem}>
							<Text style={styles.metaValue}>{recipe.difficulty}</Text>
							<Text style={styles.metaLabel}>difficulty</Text>
						</View>
					</View>
					
					<View style={styles.tabs}>
						<TouchableOpacity
							style={[
								styles.tab,
								activeTab === 'ingredients' && styles.activeTab,
							]}
							onPress={() => setActiveTab('ingredients')}
						>
							<Text 
								style={[
									styles.tabText,
									activeTab === 'ingredients' && styles.activeTabText,
								]}
							>
								Ingredients
							</Text>
						</TouchableOpacity>
						
						<TouchableOpacity
							style={[
								styles.tab,
								activeTab === 'instructions' && styles.activeTab,
							]}
							onPress={() => setActiveTab('instructions')}
						>
							<Text 
								style={[
									styles.tabText,
									activeTab === 'instructions' && styles.activeTabText,
								]}
							>
								Instructions
							</Text>
						</TouchableOpacity>
					</View>
					
					{activeTab === 'ingredients' ? (
						<IngredientList ingredients={recipe.ingredients} />
					) : (
						<StepByStepInstructions steps={recipe.instructions} />
					)}
				</View>
			</ScrollView>
			
			<View style={styles.footer}>
				<AddToCartButton 
					recipeId={recipe.id} 
					price={recipe.kitPrice} 
				/>
			</View>
		</SafeAreaView>
	);
}`}</code></pre>
				</div>
			</div>
		</div>
	</PitchSlide>

	<!-- Team Section -->
	<PitchSlide 
		id="team" 
		title="Our Team" 
		subtitle="Experienced professionals with a passion for food and technology"
		bgColor="var(--bg-secondary)"
	>
		<div class="team-grid grid grid-3">
			<div class="team-member card">
				<div class="member-photo">
					<img src="https://placehold.co/300x300/FF6B35/FFF?text=Ashley" alt="Ashley Lane" />
				</div>
				<div class="member-info">
					<h3>Ashley Lane</h3>
					<p class="member-title">Co-Founder & CEO</p>
					<p>A veteran food entrepreneur, Ashley founded JustCook in 2014, pioneering the meal kit concept in the Middle East.</p>
				</div>
			</div>
			
			<div class="team-member card">
				<div class="member-photo">
					<img src="https://placehold.co/300x300/2EC4B6/FFF?text=CTO" alt="CTO" />
				</div>
				<div class="member-info">
					<h3>Tech Lead</h3>
					<p class="member-title">Co-Founder & CTO</p>
					<p>With 10+ years in software development, our CTO specializes in building scalable consumer applications.</p>
				</div>
			</div>
			
			<div class="team-member card">
				<div class="member-photo">
					<img src="https://placehold.co/300x300/FFBF69/333?text=Operations" alt="Operations Lead" />
				</div>
				<div class="member-info">
					<h3>Operations Lead</h3>
					<p class="member-title">Head of Operations</p>
					<p>Formerly operations manager at a national catering company, with 15 years of experience managing kitchens and logistics.</p>
				</div>
			</div>
		</div>
	</PitchSlide>

	<!-- Contact Section -->
	<PitchSlide 
		id="contact" 
		title="Get In Touch" 
		subtitle="Join us in revolutionizing home cooking"
	>
		<div class="contact-container grid grid-2">
			<div class="contact-info">
				<h3>Contact Details</h3>
				<ul class="contact-list">
					<li>
						<strong>Ashley Lane, CEO</strong><br>
						<a href="mailto:ashley@justcook.app">ashley@justcook.app</a><br>
						<a href="tel:+97156653507">+971 56 653 5507</a>
					</li>
					<li>
						<strong>Tech Team</strong><br>
						<a href="mailto:tech@justcook.app">tech@justcook.app</a>
					</li>
				</ul>
				
				<div class="funding-info mt-4">
					<h3>Funding Opportunity</h3>
					<p>We are raising $250,000 to fuel the next 18 months of development and growth. This seed investment will stabilize our operations and fund the rollout of JustCook.app.</p>
					<CTAButton 
						text="Request Pitch Deck" 
						href="mailto:ashley@justcook.app?subject=JustCook.app%20Pitch%20Deck%20Request" 
						variant="primary" 
						size="medium" 
					/>
				</div>
			</div>
			
			<div class="contact-form-container">
				<form class="contact-form">
					<div class="form-group">
						<label for="name">Name</label>
						<input type="text" id="name" name="name" required>
					</div>
					
					<div class="form-group">
						<label for="email">Email</label>
						<input type="email" id="email" name="email" required>
					</div>
					
					<div class="form-group">
						<label for="message">Message</label>
						<textarea id="message" name="message" rows="5" required></textarea>
					</div>
					
					<button type="submit" class="btn">Send Message</button>
				</form>
			</div>
		</div>
	</PitchSlide>
</MainLayout>

<style>
	/* Hero Section */
	.hero-section {
		min-height: 100vh;
		display: flex;
		flex-direction: column;
		justify-content: center;
		position: relative;
		padding: 6rem 0;
	}
	
	.hero-content {
		max-width: 600px;
		margin-bottom: 2rem;
	}
	
	.hero-title {
		font-size: clamp(3rem, 8vw, 5rem);
		margin-bottom: 1rem;
		line-height: 1.1;
	}
	
	.hero-tagline {
		font-size: clamp(1.5rem, 4vw, 2rem);
		margin-bottom: 2rem;
		opacity: 0.9;
	}
	
	.hero-cta {
		display: flex;
		gap: 1rem;
		flex-wrap: wrap;
	}
	
	.hero-image {
		max-width: 600px;
		margin: 0 auto;
	}
	
	.hero-image img {
		border-radius: 20px;
		box-shadow: var(--shadow-lg);
	}
	
	.scroll-indicator {
		position: absolute;
		bottom: 2rem;
		left: 50%;
		transform: translateX(-50%);
		display: flex;
		flex-direction: column;
		align-items: center;
		gap: 0.5rem;
		opacity: 0.7;
		animation: bounce 2s infinite;
	}
	
	@keyframes bounce {
		0%, 20%, 50%, 80%, 100% {
			transform: translateY(0) translateX(-50%);
		}
		40% {
			transform: translateY(-10px) translateX(-50%);
		}
		60% {
			transform: translateY(-5px) translateX(-50%);
		}
	}
	
	/* Problem Section */
	.problem-card {
		height: 100%;
	}
	
	/* Solution Section */
	.solution-container {
		align-items: center;
	}
	
	.solution-image img {
		border-radius: 20px;
		box-shadow: var(--shadow-lg);
	}
	
	.features-list {
		display: flex;
		flex-direction: column;
		gap: 2rem;
		margin-top: 2rem;
	}
	
	.feature-item {
		display: flex;
		gap: 1rem;
		align-items: flex-start;
	}
	
	.feature-icon {
		font-size: 2rem;
		flex-shrink: 0;
	}
	
	/* Market Section */
	.trend-stat {
		margin-top: 1.5rem;
		display: flex;
		flex-direction: column;
		align-items: center;
		text-align: center;
		padding: 1rem;
		background-color: rgba(46, 196, 182, 0.1);
		border-radius: var(--radius-md);
	}
	
	.stat-number {
		font-size: 2.5rem;
		font-weight: 700;
		color: var(--color-secondary);
	}
	
	.expansion-map {
		display: flex;
		flex-direction: column;
		gap: 2rem;
		margin-top: 2rem;
	}
	
	.expansion-phase {
		display: flex;
		gap: 1.5rem;
		align-items: center;
	}
	
	.phase-number {
		display: flex;
		align-items: center;
		justify-content: center;
		width: 3rem;
		height: 3rem;
		background-color: var(--color-primary);
		color: white;
		border-radius: 50%;
		font-size: 1.5rem;
		font-weight: 700;
		flex-shrink: 0;
	}
	
	/* Process Section */
	.process-step {
		position: relative;
		height: 100%;
	}
	
	.step-number {
		display: inline-block;
		width: 2.5rem;
		height: 2.5rem;
		background-color: var(--color-primary);
		color: white;
		border-radius: 50%;
		display: flex;
		align-items: center;
		justify-content: center;
		font-weight: 700;
		font-size: 1.25rem;
		margin-bottom: 1rem;
	}
	
	/* Team Section */
	.team-member {
		text-align: center;
	}
	
	.member-photo {
		width: 200px;
		height: 200px;
		margin: 0 auto 1.5rem;
		border-radius: 50%;
		overflow: hidden;
	}
	
	.member-photo img {
		width: 100%;
		height: 100%;
		object-fit: cover;
	}
	
	.member-title {
		color: var(--color-primary);
		font-weight: 600;
		margin-bottom: 1rem;
	}
	
	/* Contact Section */
	.contact-list {
		list-style: none;
		padding: 0;
		margin-bottom: 2rem;
	}
	
	.contact-list li {
		margin-bottom: 1.5rem;
	}
	
	.contact-form {
		background: white;
		padding: 2rem;
		border-radius: var(--radius-lg);
		box-shadow: var(--shadow-md);
	}
	
	.form-group {
		margin-bottom: 1.5rem;
	}
	
	.form-group label {
		display: block;
		margin-bottom: 0.5rem;
		font-weight: 500;
	}
	
	.form-group input,
	.form-group textarea {
		width: 100%;
		padding: 0.75rem;
		border: 1px solid #ddd;
		border-radius: var(--radius-md);
		font-family: inherit;
		font-size: 1rem;
	}
	
	.form-group input:focus,
	.form-group textarea:focus {
		outline: none;
		border-color: var(--color-primary);
		box-shadow: 0 0 0 2px rgba(255, 107, 53, 0.2);
	}
	
	.mt-4 {
		margin-top: 2rem;
	}
	
	/* Responsive Styles */
	@media (max-width: 768px) {
		.hero-section {
			text-align: center;
			padding: 4rem 0;
		}
		
		.hero-content {
			margin: 0 auto 3rem;
		}
		
		.hero-cta {
			justify-content: center;
		}
		
		.grid-3 {
			grid-template-columns: 1fr;
		}
		
		.solution-container {
			grid-template-columns: 1fr;
		}
		
		.solution-image {
			margin-bottom: 2rem;
			text-align: center;
		}
		
		.solution-image img {
			max-width: 300px;
			margin: 0 auto;
		}
		
		.contact-container {
			grid-template-columns: 1fr;
			gap: 3rem;
		}
	}
	
	/* Tech Stack Section */
	.tech-category {
		text-align: center;
	}
	
	.tech-icons {
		display: flex;
		flex-wrap: wrap;
		justify-content: center;
		gap: 1.5rem;
		margin-top: 1.5rem;
	}
	
	.tech-icon {
		display: flex;
		flex-direction: column;
		align-items: center;
		gap: 0.5rem;
	}
	
	.tech-icon img {
		width: 50px;
		height: 50px;
		transition: transform 0.3s ease;
	}
	
	.tech-icon:hover img {
		transform: scale(1.2);
	}
	
	.tech-icon span {
		font-size: 0.9rem;
		font-weight: 500;
	}
	
	/* App Demo Section */
	.app-demo-container {
		display: flex;
		flex-direction: column;
		align-items: center;
		gap: 2rem;
	}
	
	.phone-mockup {
		width: 340px;
		height: 700px;
		background-color: #111;
		border-radius: 40px;
		padding: 10px;
		box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
		position: relative;
	}
	
	.phone-screen {
		width: 320px;
		height: 680px;
		background-color: white;
		border-radius: 30px;
		overflow: hidden;
		position: relative;
	}
	
	.app-screen {
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		opacity: 0;
		transition: opacity 0.5s ease;
		display: flex;
		flex-direction: column;
	}
	
	.app-screen.active {
		opacity: 1;
		z-index: 1;
	}
	
	.app-screen img {
		width: 100%;
		height: calc(100% - 40px);
		object-fit: cover;
	}
	
	.screen-caption {
		height: 40px;
		display: flex;
		align-items: center;
		justify-content: center;
		background-color: #f8f8f8;
		font-weight: 500;
	}
	
	.app-demo-controls {
		display: flex;
		gap: 1rem;
	}
	
	.demo-btn {
		padding: 0.75rem 1.5rem;
		background-color: var(--bg-card);
		border: 2px solid var(--color-primary);
		border-radius: 8px;
		font-weight: 600;
		cursor: pointer;
		transition: all 0.3s ease;
	}
	
	.demo-btn.active {
		background-color: var(--color-primary);
		color: white;
	}
	
	.demo-btn:hover:not(.active) {
		background-color: rgba(255, 107, 53, 0.1);
	}
	
	/* Architecture Section */
	.architecture-container {
		display: flex;
		flex-direction: column;
		gap: 3rem;
	}
	
	.architecture-diagram {
		display: flex;
		flex-direction: column;
		align-items: center;
		gap: 1rem;
	}
	
	.arch-layer {
		width: 100%;
		background-color: var(--bg-card);
		border-radius: 12px;
		padding: 1.5rem;
		box-shadow: var(--shadow-md);
	}
	
	.layer-title {
		text-align: center;
		margin-bottom: 1rem;
		color: var(--color-primary);
	}
	
	.arch-components {
		display: flex;
		justify-content: center;
		flex-wrap: wrap;
		gap: 2rem;
	}
	
	.arch-component {
		display: flex;
		flex-direction: column;
		align-items: center;
		gap: 0.5rem;
		transition: transform 0.3s ease;
	}
	
	.arch-component:hover {
		transform: translateY(-5px);
	}
	
	.component-icon {
		font-size: 2rem;
		background-color: rgba(255, 107, 53, 0.1);
		width: 60px;
		height: 60px;
		display: flex;
		align-items: center;
		justify-content: center;
		border-radius: 12px;
	}
	
	.component-label {
		font-weight: 500;
		font-size: 0.9rem;
	}
	
	.arch-connector {
		height: 30px;
		width: 4px;
		background-color: var(--color-primary);
		position: relative;
	}
	
	.arch-connector::before,
	.arch-connector::after {
		content: '';
		position: absolute;
		width: 12px;
		height: 4px;
		background-color: var(--color-primary);
	}
	
	.arch-connector::before {
		top: 0;
		left: -4px;
	}
	
	.arch-connector::after {
		bottom: 0;
		left: -4px;
	}
	
	.architecture-features {
		display: grid;
		grid-template-columns: repeat(3, 1fr);
		gap: 2rem;
	}
	
	.arch-feature {
		background-color: var(--bg-card);
		border-radius: 12px;
		padding: 1.5rem;
		box-shadow: var(--shadow-md);
		transition: transform 0.3s ease, box-shadow 0.3s ease;
	}
	
	.arch-feature:hover {
		transform: translateY(-5px);
		box-shadow: var(--shadow-lg);
	}
	
	@media (max-width: 768px) {
		.architecture-features {
			grid-template-columns: 1fr;
		}
	}
	
	/* Performance Metrics Section */
	.metric-card {
		text-align: center;
		display: flex;
		flex-direction: column;
		align-items: center;
	}
	
	.metric-value {
		font-size: 3rem;
		font-weight: 700;
		color: var(--color-primary);
		margin-bottom: 0.5rem;
	}
	
	.metric-bar {
		width: 100%;
		height: 8px;
		background-color: rgba(0, 0, 0, 0.1);
		border-radius: 4px;
		margin-top: 1rem;
		overflow: hidden;
	}
	
	.metric-progress {
		height: 100%;
		background-color: var(--color-primary);
		border-radius: 4px;
		width: 0;
		transition: width 2s ease;
	}
	
	.optimization-list {
		padding-left: 1.5rem;
		margin-top: 1rem;
	}
	
	.optimization-list li {
		margin-bottom: 0.75rem;
	}
	
	.mt-5 {
		margin-top: 3rem;
	}

	/* Code Snippets Section */
	.code-snippets-container {
		display: flex;
		flex-direction: column;
		gap: 1.5rem;
	}
	
	.code-tabs {
		display: flex;
		gap: 0.5rem;
		border-bottom: 1px solid rgba(0, 0, 0, 0.1);
		padding-bottom: 0.5rem;
	}
	
	.code-tab {
		padding: 0.5rem 1rem;
		background: none;
		border: none;
		border-radius: 4px 4px 0 0;
		cursor: pointer;
		font-weight: 500;
		color: var(--text-secondary);
		transition: all 0.3s ease;
	}
	
	.code-tab.active {
		color: var(--color-primary);
		background-color: rgba(255, 107, 53, 0.1);
	}
	
	.code-panels {
		position: relative;
		border-radius: 8px;
		overflow: hidden;
	}
	
	.code-panel {
		display: none;
	}
	
	.code-panel.active {
		display: block;
	}
	
	.code-header {
		display: flex;
		justify-content: space-between;
		align-items: center;
		padding: 0.75rem 1rem;
		background-color: #2d2d2d;
		color: #e0e0e0;
		font-family: monospace;
	}
	
	.code-filename {
		font-weight: 500;
	}
	
	.code-language {
		font-size: 0.8rem;
		padding: 0.2rem 0.5rem;
		background-color: rgba(255, 255, 255, 0.1);
		border-radius: 4px;
	}
	
	.code-block {
		margin: 0;
		padding: 1rem;
		background-color: #1e1e1e;
		color: #e0e0e0;
		overflow-x: auto;
		font-family: 'Fira Code', monospace;
		font-size: 0.9rem;
		line-height: 1.5;
	}
	
	.code-block code {
		white-space: pre;
	}
	
	@media (max-width: 768px) {
		.code-block {
			font-size: 0.8rem;
		}
	}

	/* Data Visualization Section */
	.chart-container {
		height: 300px;
		padding: 1.5rem;
	}
	
	.chart {
		height: 100%;
		width: 100%;
	}
</style>

<script>
  // Fade-in animation for elements
  document.addEventListener('DOMContentLoaded', () => {
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('visible');
        }
      });
    }, { threshold: 0.1 });
    
    document.querySelectorAll('.card, .feature-item, .expansion-phase, .team-member').forEach(el => {
      el.classList.add('fade-in');
      observer.observe(el);
    });
  });

  // App Demo Screen Switcher
  document.addEventListener('DOMContentLoaded', () => {
    const demoBtns = document.querySelectorAll('.demo-btn');
    
    demoBtns.forEach(btn => {
      btn.addEventListener('click', () => {
        // Remove active class from all buttons and screens
        document.querySelectorAll('.demo-btn').forEach(b => b.classList.remove('active'));
        document.querySelectorAll('.app-screen').forEach(s => s.classList.remove('active'));
        
        // Add active class to clicked button and corresponding screen
        btn.classList.add('active');
        const screenId = btn.getAttribute('data-screen') || '';
        const screenElement = document.getElementById(screenId);
        if (screenElement) {
          screenElement.classList.add('active');
        }
      });
    });
  });

  // Counter Animation
  document.addEventListener('DOMContentLoaded', () => {
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const counters = entry.target.querySelectorAll('.counter');
          
          counters.forEach(counter => {
            const target = parseFloat(counter.getAttribute('data-target') || '0');
            const duration = 2000; // 2 seconds
            const step = target / (duration / 16); // 60fps
            
            let current = 0;
            const timer = setInterval(() => {
              current += step;
              counter.textContent = current.toFixed(1);
              
              if (current >= target) {
                counter.textContent = target.toString();
                clearInterval(timer);
              }
            }, 16);
          });
          
          // Animate progress bars
          entry.target.querySelectorAll('.metric-progress').forEach(bar => {
            setTimeout(() => {
              if (bar instanceof HTMLElement) {
                const styleAttr = bar.getAttribute('style');
                if (styleAttr && styleAttr.includes('width:')) {
                  bar.style.width = styleAttr.split('width: ')[1];
                }
              }
            }, 300);
          });
          
          observer.unobserve(entry.target);
        }
      });
    }, { threshold: 0.1 });
    
    const performanceSection = document.querySelector('#performance');
    if (performanceSection) {
      const metricsGrids = performanceSection.querySelectorAll('.metrics-grid');
      metricsGrids.forEach(el => {
        observer.observe(el);
      });
    }
  });

  // Code Tabs
  document.addEventListener('DOMContentLoaded', () => {
    const codeTabs = document.querySelectorAll('.code-tab');
    
    codeTabs.forEach(tab => {
      tab.addEventListener('click', () => {
        // Remove active class from all tabs and panels
        document.querySelectorAll('.code-tab').forEach(t => t.classList.remove('active'));
        document.querySelectorAll('.code-panel').forEach(p => p.classList.remove('active'));
        
        // Add active class to clicked tab and corresponding panel
        tab.classList.add('active');
        const tabId = tab.getAttribute('data-tab') || '';
        const panel = document.getElementById(`${tabId}-panel`);
        if (panel) {
          panel.classList.add('active');
        }
      });
    });
  });
</script>
